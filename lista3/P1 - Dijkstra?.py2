# DESISTI DE FAZER EM GO...
from heapq import *

n, m = map(int, raw_input().split())

def swap(a, b):
  if b < a:
    t = a
    a = b
    b = t
  return a, b

edges_map = {}
for i in xrange(m):
  a, b, w = map(int, raw_input().split())
  a, b = swap(a, b)
  edge = (a, b)
  old_w = edges_map.get(edge)
  if old_w:
    w = min(w, old_w)
  edges_map[edge] =  w

def weight(uid, vid):
  uid, vid = swap(uid, vid)
  edge = (uid, vid)
  return edges_map.get(edge)

distanceToRoot = {}
predecessor = {}
min_heap = []
predecessor[1] = 1
distanceToRoot[1] = 0
heappush(min_heap, (0, 1))
while min_heap:
  distanceToRootFromU, uid = heappop(min_heap)
  for vid in xrange(1, n + 1):
      w = weight(uid, vid)
      if not w: continue 
      distanceThroughU = distanceToRootFromU + w
      distanceToRootFromV = distanceToRoot.get(vid)
      if not distanceToRootFromV:
        distanceToRootFromV = float('inf')  
      if distanceToRootFromV > distanceThroughU:
        distanceToRoot[vid] = distanceThroughU
        predecessor[vid] = uid
        heappush(min_heap, (distanceThroughU, vid))

output = str(n)
nod = predecessor.get(n)
while nod != 1 and nod != None:
  output = str(nod) + " " + output
  nod = predecessor.get(nod)
output = "1 " + output

if nod != None:
  print(output)
else:
  print("-1")
